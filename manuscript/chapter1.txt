# Глава 1 - Программирование в IDLE

Использование IDLE
----------

Python поставляется с собственным редактором кода - **IDLE** (интегрированная
среда для разработки и обучения). Существует версия, что название для IDLE
пришло  от Eric IDLE, актёра в *Monty Python*. IDE - это редактор для
программистов, который предоставляет цветную подсветку ключевых слов языка,
автодополнение, "экспериментальный" отладчик и множество других хороших вещей.
Вы можете найти IDE для большинства популярных языков, а некоторые
представители будут работать с несколькими языками. IDLE относится к разряду
облегчённых IDE, однако обладает всеми вышеуказанными опциями. Это позволяет
легко писать и отлаживать код на Python. Причины, по которым я назвал данный
редактор "облегченным", заключаются в очень простом отладчике и отсутствии
других функций, которыми пользуются другие программисты, имеющие опыт
использования продуктов вроде Visual Studio. Вам также может быть интересно
узнать, что IDLE был создан с использованием Tkinter, Python GUI
инструментария, который поставляется вместе с Python.

Чтобы открыть IDLE, вам необходимо найти его и увидеть примерно следующее:

![image](images/idle_main.jpg)

Да, это Python-консоль, где вы можете вводить короткие скрипты и видеть
их результат немедленно, и даже взаимодействовать с кодом в реальном времени.
Компилирование кода отсутствует, так как Python - интерпретируемый язык,
который выполняется интерпретатором. Давайте сейчас напишем вашу первую
программу. Введлите после команды ввода (&gt;&gt;&gt;) в IDLE следующее:

``` {.sourceCode .python}
print("Привет из Python!")
```

Сейчас вы написали вашу первую программу. Все, что она делает, - пишет
строку на экране, но позже вы поймёте, насколько полезной она окажется.
Обратите внимание, что утверждение print изменено в Python 3.x. В Python
2.x вы бы написали код выше следующим образом:

``` {.sourceCode .python}
print "Привет из Python!"
```

В Python 3 оператор **print** преобразовано в **функцию**, поэтому требуются
круглые скобки. Мы изучим функции в главе 10.

Если вы хотите сохранить ваш код в файл, перейдите в меню File и выберите
New Window (или нажмите CTRL+N). Теперь вы можете ввести вашу программу и
сохранить её здесь. Основное преимущество от использования оболочки с
интерпретатором Python в том, что можно экспериментировать с небольшими
фрагментами, чтобы увидеть поведение кода перед добавлением в реальную
программу. Экран редактора кода немного отличается от скриншота IDLE выше:

![image](images/idle_editor.jpg)

Теперь потратим немного времени на обзор других полезных функций IDLE.

Python поставляется со множеством модулей и пакетов, которые вы можете
импортировать, чтобы добавить новый функционал. Например, вы можете
импортировать модуль **math** со всеми видами полезных математических функций
вроде квадратных корней, косинусов и т.д. В меню **File** вы найдёте пункт
**Path Browser**, который полезен для определения того, где Python будет
искать импортированные модули. Видите, сразу Python ищет в том же каталоге,
где находится запущенный скрипт, чтобы увидеть, не находится ли здесь нужный
для импорта файл. Затем он проверяет предопределённый список других мест. Вы
также можете добавлять или удалять записи из этого списка. Path Browser
покажет вам, где эти файлы расположены на вашем жёстком диске, если вы
импортировали что-нибудь. Мой Path Browser выглядит следующим образом:

![image](images/path_browser.jpg)

Далее находится  **Class Browser**, который поможет вам перемещаться по
коду. Откровенно говоря, имело бы больший смысл назвать эту опцию меню
"Module Browser", что лучше отражает действие, которое вы будете делать.
В действительности это не будет вам очень полезным прямо сейчас, однако в
будущем это изменится. Когда в одном файле будет много строк кода, эта опция
предоставит "древовидный" интерфейс для вашего кода. Обратите внимание, что
вы не сможете загрузить Class Browser до тех пор, пока не сохраните вашу
программу.

Меню **Edit** включает традиционные команды вроде Скопировать, Вырезать,
Вставить, Вперёд, Назад и Выбрать Всё. Также предоставляются различные
варианты поиска вашего кода и его замены. В конце концов, меню Edit включает
некоторые пункты, которые покажут вам различные вспомогательные вещи, такие
как подсветка круглых скобок или списка автозаполнения.

The **Format** menu has lots of useful functionality. It has some
helpful items for **indenting** and **dedenting** your code, as well as
commenting out your code. I find that pretty helpful when I'm testing my
code. Commenting out your code can be very helpful. One way it can be
helpful is when you have a lot of code and you need to find out why it's
not working correctly. Commenting out portions of it and re-running the
script can help you figure out where you went wrong. You just go along
slowly uncommenting out stuff until you hit your bug. Which reminds me;
you may have noticed that the main IDLE screen has a **Debugger** menu.

That is nice for debugging, but only in the **Shell** window. Sadly you
cannot use the debugger in your main editing menu. However you can run a
module with debugging turned on such that you are able to interact with
your program's objects. This can be useful in loops where you are trying
to determine the current value of an item inside the loop, for example.
If you happen to be using tkinter to create a user interface (UI), you
can actually leave the **mainloop()** call off (which can block the UI)
so you can debug your user interface. Finally, when an exception is
raised with your debugger running, you can double-click the exception to
jump directly to the code where the exception happened.

If you need a more versatile debugger, you should either find a
different IDE or try Python's debugger found in the **pdb** library.

------------------------------------------------------------------------

> **What are Comments?**
>
> A comment is a way to leave un-runnable code that documents what you
> are doing in your code. Every programming language uses a different
> symbol to demarcate where a comment starts and ends. What do comments
> look like in Python though? A comment is anything that begins with an
> octothorpe (i.e. a hash or pound sign). The following is an example of
> some comments in action:
>
> ``` {.sourceCode .python}
> # This is a comment before some code
> print("Hello from Python!")
> print("Winter is coming") # this is an in-line comment
> ```
>
> You can write comments on a line all by themselves or following a
> statement, like the second **print** statement above. The Python
> interpreter ignores comments, so you can write anything you want in
> them. Most programmers I have met don't use comments very much.
> However, I highly recommend using comments liberally not just for
> yourself, but for anyone else who might have to maintain or enhance
> your code in the future. I have found my own comments useful when I
> come back to a script that I wrote 6 months ago and I have found
> myself working with code that didn't have comments and wishing that it
> did so I could figure it out faster.
>
> Examples of good comments would include explanations about complex
> code statements, or adding an explanation for acronyms in your code.
> Sometimes you'll need to leave a comment to explain why you did
> something a certain way because it's just not obvious.

------------------------------------------------------------------------

Now we need to get back to going over the menu options of IDLE:

The **Run** menu has a couple of handy options. You can use it to bring
up the Python Shell, check your code for errors, or run your code. The
Options menu doesn't have very many items. It does have a Configure
option that allows you to change the code highlighting colors, fonts and
key shortcuts. Other than that, you get a Code Context option that is
helpful in that it puts an overlay in the editing window which will show
you which class or function you're currently in. We will be explaining
functions and classes near the end of Part I. You will find this feature
is useful whenever you have a lot of code in a function and the name has
scrolled off the top of the screen. With this option enabled, that
doesn't happen. Of course, if the function is too large to fit on one
screen, then it may be getting too long and it could be time to break
that function down into multiple functions. The other neat item in the
Settings dialog is under the **General** tab where you can add other
documentation. What this means is that you can add URLs to 3rd Party
documentation, such as SQLAlchemy or pillow, and have it pulled into
IDLE. To access the new documentation, just jump to the Help menu.

The **Windows** menu shows you a list of currently open Windows and
allows you to switch between them.

Last but not least is the **Help** menu where you can learn about IDLE,
get help with IDLE itself or load up a local copy of the Python
documentation. The documentation will explain how each piece of Python
works and is pretty exhaustive in its coverage. The Help menu is
probably the most helpful in that you can get access to the docs even
when you're not connected to the internet. You can search the
documentation, find HOWTOs, read about any of the builtin libraries, and
learn so much your head will probably start spinning.

Other Tips
----------

When you see code examples in the following chapters, you can write and
run them in IDLE. I wrote all my programs in IDLE for the first couple
of years of my Python programming life and I was pretty happy with it.
There are lots of free Python IDEs out there though and several IDEs
that you have to pay for. If you want to go cheap, you might want to
take a look at Eclipse+PyDev, Editra or even Notepad++. For a paid IDE,
I would recommend WingWare's IDE or possibly PyCharm. They have many
more features such as integration with code repositories, better
debuggers, refactoring help, etc.

In this book, we will be using IDLE in our examples because it comes
with Python and will provide a common test bed. I still think IDLE has
the best, most consistent code highlighting of any IDE I have used. Code
highlighting is important in my mind in that it helps prevent me from
using one of Python's keywords (or built-ins) for a variable name. In
case you're wondering, here is a list of those key words:

``` {.sourceCode .python}
and       del       from      not       while
as        elif      global    or        with
assert    else      if        pass      yield
break     except    import    print
class     exec      in        raise
continue  finally   is        return 
def       for       lambda    try
```

Let's see what happens as we type out a few things in Python:

![image](images/idle_code_colors.jpg)

As you can see, IDLE color coded everything. A key word is magenta, a
string of text is in green, a comment is in red and the output from the
print function is in blue.

Wrapping Up
-----------

In this chapter we learned how to use Python's integrated development
environment, IDLE. We also learned what **comments** are and how to use
them. At this point, you should be familiar enough with IDLE to use it
in the rest of this book. There are many other integrated development
environments (IDEs) for Python. There are free ones like PyDev and
Editra, and there are some others that you have to pay for, such as
WingWare and PyCharm. There are also plug-ins for regular text editors
that allow you to code in Python too. I think IDLE is a good place to
start, but if you already have a favorite editor, feel free to continue
using that.

At this point, we are ready to move on and start learning about Python's
various data types. We will start with Strings in the following chapter.
